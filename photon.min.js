class Photon{constructor(e={}){e=Object.assign({antialias:!1,holder:null,vertex:"precision highp float;attribute vec3 a_position;uniform vec2 u_resolution;uniform float u_time;void main() {gl_Position = vec4((a_position.xy / u_resolution) * 2.0 - 1.0, 0.0, 1.0);gl_PointSize = a_position.z;}",fragment:"precision highp float;uniform sampler2D u_texture;uniform float u_hasTexture;void main() {if ( u_hasTexture > 0.5 ) {gl_FragColor = texture2D(u_texture, gl_PointCoord);} else {gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);}}",uniforms:{},buffers:{},texture:null,blending:["SRC_ALPHA","ONE"],onUpdate:()=>{}},e);const t=Object.assign({resolution:{type:"2f",value:[0,0]},time:{type:"1f",value:0},hasTexture:{type:"1f",value:0}},e.uniforms),r=Object.assign({position:{size:3,data:[]}},e.buffers),i=document.createElement("canvas"),s=i.getContext("webgl",{antialias:e.antialias});if(!s)return!1;this.count=0,this.gl=s,this.canvas=i,this.holder=e.holder,this.onUpdate=e.onUpdate,this.data={},this.holder.appendChild(i),this.createProgram(e.vertex,e.fragment),this.createBuffers(r),this.createUniforms(t),this.updateBuffers(),this.updateUniforms(),this.createTexture(e.texture),s.blendFunc(s[e.blending[0]],s[e.blending[1]]),s.enable(s.BLEND),s.disable(s.DEPTH_TEST),window.addEventListener("resize",()=>this.setSize(),!1),this.setSize(e.width,e.height),this.update=this.update.bind(this),this.start=performance.now(),this.update()}setSize(){const e=this.canvas,t=this.gl,r=this.holder.offsetWidth,i=this.holder.offsetHeight,s=devicePixelRatio;e.width=r*s,e.height=i*s,e.style.width=r+"px",e.style.height=i+"px",this.width=r,this.height=i,t.viewport(0,0,r,i),t.clearColor(0,0,0,0),this.uniforms.resolution=[r,i]}createShader(e,t){const r=this.gl,i=r.createShader(e);if(r.shaderSource(i,t),r.compileShader(i),r.getShaderParameter(i,r.COMPILE_STATUS))return i;console.log(r.getShaderInfoLog(i)),r.deleteShader(i)}createProgram(e,t){const r=this.gl;var i=this.createShader(r.VERTEX_SHADER,e),s=this.createShader(r.FRAGMENT_SHADER,t),a=r.createProgram();r.attachShader(a,i),r.attachShader(a,s),r.linkProgram(a),r.getProgramParameter(a,r.LINK_STATUS)?(r.useProgram(a),this.program=a):(console.log(r.getProgramInfoLog(a)),r.deleteProgram(a))}createUniforms(e){const t=this.gl,r=this.data.uniforms=e,i=this.uniforms={};Object.keys(r).forEach(e=>{const s=r[e];s.uniform=t.getUniformLocation(this.program,"u_"+e),this.setUniform(e,s.value),Object.defineProperty(i,e,{set:t=>{r[e].value=t,this.setUniform(e,t)},get:()=>r[e].value})})}setUniform(e,t){const r=this.gl,i=this.data.uniforms[e];switch(i.value=t,i.type){case"1f":t=[t];break;case"2f":t=t}r["uniform"+i.type](i.uniform,...t)}updateUniforms(){this.gl;const e=this.data.uniforms;Object.keys(e).forEach(t=>{const r=e[t];this.uniforms[t]=r.value})}createBuffers(e){this.gl;const t=this.data.buffers=e,r=this.buffers={};Object.keys(t).forEach(e=>{const i=t[e];i.buffer=this.createBuffer("a_"+e,i.size),Object.defineProperty(r,e,{set:r=>{t[e].data=r,this.setBuffer(e,r),"position"==e&&(this.count=t.position.data.length/3)},get:()=>t[e].data})})}createBuffer(e,t){const r=this.gl,i=this.program,s=r.getAttribLocation(i,e),a=r.createBuffer();return r.bindBuffer(r.ARRAY_BUFFER,a),r.enableVertexAttribArray(s),r.vertexAttribPointer(s,t,r.FLOAT,!1,0,0),a}setBuffer(e,t){const r=this.gl,i=this.data.buffers;(null!=e||r.bindBuffer(r.ARRAY_BUFFER,null))&&(r.bindBuffer(r.ARRAY_BUFFER,i[e].buffer),r.bufferData(r.ARRAY_BUFFER,new Float32Array(t),r.STATIC_DRAW))}updateBuffers(){this.gl;const e=this.buffers;Object.keys(e).forEach(t=>e[t]=buffer.data),this.setBuffer(null)}createTexture(e){const t=this.gl,r=t.createTexture();t.bindTexture(t.TEXTURE_2D,r),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,1,1,0,t.RGBA,t.UNSIGNED_BYTE,new Uint8Array([0,0,0,0])),this.texture=r,e&&(this.uniforms.hasTexture=1,this.loadTexture(e))}loadTexture(e){const t=this.gl;this.texture;var r=new Image;r.onload=(()=>{t.bindTexture(t.TEXTURE_2D,this.texture),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,r),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.LINEAR_MIPMAP_LINEAR),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.LINEAR),t.generateMipmap(t.TEXTURE_2D)}),r.src=e}update(){const e=this.gl,t=(performance.now()-this.start)/5e3;this.uniforms.time=t,this.count>0&&(e.clear(e.COLORBUFFERBIT),e.drawArrays(e.POINTS,0,this.count)),this.onUpdate(),requestAnimationFrame(this.update)}}